<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[404cn's blog]]></title>
<description><![CDATA[404cn's blog]]></description>
<link>https://404cn.github.io/</link>
<lastBuildDate>Wed, 06 Jul 2022 22:49:07 +0800</lastBuildDate>
<item>
  <title><![CDATA[Emacs Golang 开发环境配置]]></title>
  <description><![CDATA[
<p>
使用 Emacs 开发 Golang 一段时间时间了，今天将相关配置和踩过的坑总结分
享出来，本文主要介绍的并不是从零开始的配置，主要都是与 Golang 开发功能
相关的配置，默认认为你已经了解如何在 Emacs 查看一些内置的函数文档，绑
定快捷键等基本操作，一些基础的 Emacs 功能可以参考梦梦的 <a href="https://github.com/condy0919/emacs-newbie/blob/master/introduction-to-builtin-modes.md">Emacs builtin
modes 功能介绍</a>。
</p>


<p>
在使用任何 编辑器/IDE 开发时，最核心的需求无非以下几点：
</p>
<ul class="org-ul">
<li>括号的自动匹配</li>
<li>代码的自动补全</li>
<li>查找定义、引用</li>
<li>静态检查</li>
<li>在项目中模糊查找（文件/字符串）</li>
</ul>
<div id="outline-container-org12b7009" class="outline-2">
<h2 id="org12b7009">开启 Emacs 自带的括号匹配</h2>
<div class="outline-text-2" id="text-org12b7009">
<p>
Emacs 自带的 <code>electric-pair-mode</code> 已经足够好用，只不过默认没有开启。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
(add-hook 'prog-mode-hook #'electric-pair-mode)
</pre>
</div>
</div>
</div>
<div id="outline-container-org41d7814" class="outline-2">
<h2 id="org41d7814">安装 straight.el</h2>
<div class="outline-text-2" id="text-org41d7814">
<p>
在进行下一步配置之前，我们需要先安装 <a href="https://github.com/raxod502/straight.el">straight.el</a> ，因为我们要用它来安
装其他的第三方包。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq straight-check-for-modifications '(check-on-save find-when-checking))
(setq straight-vc-git-default-clone-depth 1)

(setq straight-disable-native-compile
      (when (fboundp 'native-comp-available-p)
    (not (native-comp-available-p))))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
</pre>
</div>
<p>
straight.el 在安装其他包时需要访问 github，如果你的网络不够 <code>绿色</code> 咳咳&#x2026;
</p>

<p>
可以将安装时的 <code>github.com</code> 替换为 <code>github.com.cnpmjs.org</code> 。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun +set-github-mirror (oldfunc &amp;rest args)
  (let ((url (apply oldfunc args)))
    (replace-regexp-in-string (rx (group "github.com"))
                              "github.com.cnpmjs.org" url nil nil 1)))
(advice-add 'straight-vc-git--encode-url :around #'+set-github-mirror)
</pre>
</div>
</div>
</div>
<div id="outline-container-org5621672" class="outline-2">
<h2 id="org5621672">设置 major-mode</h2>
<div class="outline-text-2" id="text-org5621672">
<p>
安装 <a href="https://github.com/dominikh/go-mode.el">go-mode.el</a> ，其为我们在进行 Golang 开发时提供了相当多的常用功能。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(straight-use-package 'go-mode)
</pre>
</div>
<p>
设置缩进。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq-default tab-width 4
              indent-tabs-mode nil)
</pre>
</div>
<p>
使用 <code>goimports</code> 代替 <code>gofmt</code> 在文件保存后自动格式化我们的代码
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq gofmt-command "goimports")
(add-hook 'before-save-hook #'gofmt-before-save)
</pre>
</div>
<p>
如果你使用的是 MacOS 系统，那么需要使用 <a href="https://github.com/purcell/exec-path-from-shell">exec-path-from-shell</a> 让 Emacs
读取系统的环境变量，不然 Emacs 可能找不到你安装的 go。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(when (eq system-type 'darwin)
  (straight-use-package 'exec-path-from-shell)
  (setq exec-path-from-shell-arguments '("-l"))
  (add-hook 'after-init-hook #'exec-path-from-shell-initialize)
  (with-eval-after-load "go-mode"
    (with-eval-after-load "exec-path-from-shell"
      (exec-path-from-shell-copy-envs '("GOPATH" "GO111MODULE" "GOPROXY")))))
</pre>
</div>
<p>
go-mode 在格式化代码时如果发现错误会弹出一个 buffer，这会打乱我们的窗
口布局，其实我们只需要简单的设置下自带的 <code>flymake-mode</code> 就可以方便的在错
误之间跳转而不是通过一个单独的 buffer 查看。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(add-hook 'prog-mode-hook #'flymake-mode)
(with-eval-after-load "flymake"
  (define-key flymake-mode-map (kbd "C-c C-b") 'flymake-show-diagnostics-buffer)
  (define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
  (define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error))
</pre>
</div>
<p>
这样就可以使用 <code>M-n</code> ， <code>M-p</code> 在错误之间移动，然后把 go-mode 自动弹出的这
个 buffer 关掉。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq gofmt-show-errors nil)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf4e0232" class="outline-2">
<h2 id="orgf4e0232">代码补全、跳转</h2>
<div class="outline-text-2" id="text-orgf4e0232">
<p>
安装 <a href="http://company-mode.github.io/">company-mode</a> ，在补全时可以使用 <code>C-p</code> <code>C-n</code> 或者 <code>TAB</code> 进行选择，回车完
成补全。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(straight-use-package 'company)
(add-hook 'prog-mode-hook #'company-mode)
(setq company-tooltip-limit 10
      company-tooltip-align-annotations t
      company-tooltip-width-grow-only t
      company-abort-manual-when-too-short t
      company-require-match nil
      company-backends '(company-capf)
      company-tooltip-margin 0)
(with-eval-after-load "company"
  (define-key company-active-map [tab] 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (define-key company-active-map (kbd "C-n") #'company-select-next))
</pre>
</div>
<p>
安装 <a href="https://github.com/joaotavora/eglot">eglot</a> ，一个 Emacs 中轻量级的 LSP 客户端，在 go-mode 中启用。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(straight-use-package 'eglot)
(add-hook 'go-mode-hook #'eglot-ensure)
(setq eglot-ignored-server-capabilites '(:documentHighlightProvider)
      read-process-output-max (* 1024 1024))
</pre>
</div>
<p>
eglot 使用 Emacs 内置的 project.el 管理项目，以 .git 目录作为项目的根
目录，如果你的项目包含一些子项目，例如：
</p>
<pre class="example" id="org81c0282">
├── .git
├── project1
│   ├── go.mod
│   └── main.go
├── project2
│   ├── go.mod
│   └── main.go
└── project3
    ├── go.mod
    └── main.go
</pre>
<p>
如果你不想让 project1 中的代码出现在 project2 的补全中，或者在
project2 中查找定义时不想要 project1 中的定义出现在你的选择列表中时，
则推荐使用 <code>go.mod</code> 所在的目录为项目的根目录，解决不同项目间的代码补全与
跳转影响。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(with-eval-after-load "go-mode"
  (with-eval-after-load "project"
    (defun project-find-go-module (dir)
      (when-let ((root (locate-dominating-file dir "go.mod")))
        (cons 'go-module root)))
    (cl-defmethod project-root ((project (head go-module)))
      (cdr project))
    (add-hook 'project-find-functions #'project-find-go-module)))
</pre>
</div>
<p>
eglot 默认会使用 eldoc 显示函数等文档，但是很多时候我们不是想立即查看，
为了防止文档扰乱视线，给 eldoc 设置个 delay 时间。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq eldoc-idle-dealy 2)
</pre>
</div>
<p>
如果你想在补全函数时带有占位符，可以对项目进行单独的配置，只需要在项目
根目录的 <code>.dir-locals.el</code> 中添加如下代码，eglot 就会在初始化 gopls 之后
修改 gopls 的配置，当然这个功能依赖 <a href="https://github.com/joaotavora/yasnippet">yasnippet</a> ，所以我们也需要安装它。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(straight-use-package 'yasnippet)
(add-hook 'prog-mode-hook #'yas-minor-mode)
</pre>
</div>
<p>
在项目根目录中创建 <code>.dir-locals.el</code> 。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">((go-mode
  . ((eglot-workspace-configuration
      . ((:gopls . (:usePlaceholders t)))))))
</pre>
</div>
<p>
当然也可以在你的配置文件中默认开启，这样就不需要对项目单独设置。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq-default eglot-workspace-configuration
              '((gopls
                 (usePlaceholders . t))))
</pre>
</div>
<p>
另一个非常有用的 tip 是如果你的项目使用了 <a href="https://golang.org/pkg/go/build/#hdr-Build_Constraints">Build Constraints</a> ，也可以针
对项目单独修改 <code>gopls</code> 的配置使代码的补全与跳转完美的工作。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">((go-mode
  . ((eglot-workspace-configuration
      . ((:gopls . (:buildFlags ["-tags=debug"])))))))
</pre>
</div>
<p>
这里就不写出全局开启的示例了，而且这个功能一般不需要全局开启。
</p>
</div>
</div>
<div id="outline-container-orgb74f438" class="outline-2">
<h2 id="orgb74f438">总结</h2>
<div class="outline-text-2" id="text-orgb74f438">
<p>
Emacs 内置的 electric-pair-mode 帮我们实现了括号匹配， project.el 可以
在项目中查找文件、字符串等（ <code>project-find-file</code> <code>project-search</code>
<code>project-switch-to-buffer</code> ）。
</p>

<p>
在安装了 eglot、company-mode 后实现了代码的补全、跳转等功能
（ <code>xref-find-definitions</code> <code>xref-find-references</code> ），同时 eglot 配合内置
的 flymake 也为我们提供了静态检查。
</p>

<p>
当然这些插件的功能远不只这些，例如 eglot 可以帮你重命名函数或变量（同
时修改其引用处的名字）， company-mode 不仅可以补全代码也可以补全文件路
径、代码片段，在编写 Golang 时需要用到的一些工具链是不是也可以通过
elisp 管理从而达到一个命令进行安装/更新等。
</p>

<p>
在 Emacs 中能限制你的只有你的想象力与行动力，种种强大或实用的功能不可
能在一篇文章中全部介绍，剩下的就需要你自己发现或者根据自身特定需求进行
扩展了。
</p>
</div>
</div>
<div class="taglist"><a href="https://404cn.github.io/tags.html">Tags</a>: <a href="https://404cn.github.io/tag-emacs.html">emacs</a> <a href="https://404cn.github.io/tag-golang.html">golang</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[golang]]></category>
  <link>https://404cn.github.io/2021-08-13-Emacs-Golang-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
  <guid>https://404cn.github.io/2021-08-13-Emacs-Golang-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
  <pubDate>Fri, 13 Aug 2021 14:41:00 +0800</pubDate>
</item>
</channel>
</rss>
